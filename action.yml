name: "AWS CodeArtifact login Action"
description: Github Action to fetch a token for AWS CodeArtifact and (optionally) retrieve a repository URL
inputs:
  codeartifact-domain:
    description: CodeArtifact domain to which the package repository belongs
    required: true
  codeartifact-domain-owner:
    description: Owner (AWS Account) of the CodeArtifact domain
    required: true
  poetry-repository-name:
    description: Poetry repository name
    required: true
    default: "codeartifact"
  codeartifact-repository:
    description: CodeArtifact repository for which to optionally fetch the URL
    required: false
  configure-poetry:
    description: Configure Poetry with temporary CodeArtifact credentials
    required: false
    default: "false"
  configure-poetry-auth-file:
    description: Configure Poetry `auth.toml` filename
    required: false
    default: "false"
  aws-region:
    description: AWS Region
    required: true
    default: "us-east-1"
outputs:
  token:
    description: "Temporary token to authenticate with AWS CodeArtifact repositories"
    value: ${{ steps.codeartifact-metadata.outputs.token }}
  repo-url:
    description: "URL for the specified repository"
    value: ${{ steps.codeartifact-metadata.outputs.repo-url }}

runs:
  using: "composite"
  steps:

    - name: Fetch CodeArtifact metadata
      id: codeartifact-metadata
      shell: bash
      run: |
        echo "::set-output name=token::$(aws codeartifact get-authorization-token --domain ${{ inputs.codeartifact-domain }} --domain-owner ${{ inputs.codeartifact-domain-owner }} --region ${{ inputs.aws-region }} --query authorizationToken --output text)"
        REPO_URL=$(aws codeartifact get-repository-endpoint --domain ${{ inputs.codeartifact-domain }} --domain-owner ${{ inputs.codeartifact-domain-owner }} --repository ${{ inputs.codeartifact-repository }} --region ${{ inputs.aws-region }} --format pypi --query repositoryEndpoint --output text)
        REPO_CLEAN_URL=$(echo $REPO_URL | sed 's/https:\/\///')
        echo "::set-output name=repo-url::$REPO_CLEAN_URL"

    - name: Configure PIP
      shell: bash
      run: |
        echo "TOKEN=${{ steps.codeartifact-metadata.outputs.token }}"
        echo "CLEAN_REPO_URL=${{ steps.codeartifact-metadata.outputs.repo-url }}"
        pip config set site.index-url "https://aws:${{ steps.codeartifact-metadata.outputs.token }}@${{ steps.codeartifact-metadata.outputs.repo-url }}simple/"

    - name: Configure Poetry
      shell: bash
      run: |
        if [ "${{ inputs.configure-poetry }}" == "true" ]; then
          poetry config repositories.${{ inputs.poetry-repository-name }} ${{ steps.codeartifact-metadata.outputs.repo-url }}
          poetry config http-basic.${{ inputs.poetry-repository-name }} aws ${{ steps.codeartifact-metadata.outputs.token }}
          echo "Poetry configured."
        fi

    - name: Generate Poetry "auth.toml" file
      shell: bash
      run: |
        if [ "${{ inputs.configure-poetry-auth-file }}" == "true" ]; then
          touch auth.toml
          echo "[repositories]" >> auth.toml
          echo "[repositories.${{ inputs.poetry-repository-name }}]" >> auth.toml
          echo "url = \"${{ steps.codeartifact-metadata.outputs.repo-url }}\"" >> auth.toml
          echo "[http-basic]" >> auth.toml
          echo "[http-basic.${{ inputs.poetry-repository-name }}]" >> auth.toml 
          echo "username = \"aws\"" >> auth.toml 
          echo "password = \"${{ steps.codeartifact-metadata.outputs.token }}\"" >> auth.toml
          echo "Poetry "auth.toml" generated."
        fi
